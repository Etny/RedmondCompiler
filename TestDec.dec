#Settings
	
PrecedenceSearchDepth: 1
AutoValueInheritance: true

#end

#Tokens

Identifier
Operator
Punctuation
Digit
Whitespace
NewLine
StringLiteral
BoolLiteral
Keyword

#End

#Lex

letter = [a-zA-Z]
number = [0-9]
character = letter|number

%%

true {BoolLiteral; $$.type = "bool"; $$ = makeValue("bool", parseBool($))}
(letter|_) character* {Identifier}
number+ {Digit; $$.num = parseInt($); $$.type = "int"; $$ = makeValue("int32", parseInt($));}
[=\*/+-] {Operator}
[$,();:\{\}>.,] {Punctuation}
//[\n\r]	{NewLine}
[\w\t\r\n]	{Whitespace}
"((letter|number)|[\w\t\r\n])*"	{StringLiteral; $$ = makeValue("string", $)}

#End

#Grammar

left + -
left * /

%%

file				: import_list class_list	{$$ = makeNode("File", $1, $2)}
					;

import_list			: import_list import_dec	{addChild($1, $2); $$ = $1}
					| import_dec				{$$ = makeNode("ImportList", $1)}
					|							{$$ = makeNode("ImportList")}
					;

import_dec			: 'using' dotted_name ';'	{$$ = makeLeaf("Import", $2.name)}
					;

class_list			: class_list class_dec	{addChild($1, $2); $$ = $1}
					| class_dec				{$$ = makeNode("ClassList", $1)}
					|						{$$ = makeNode("ClassList")}
					;

class_dec			: 'class' id '\{' member_list '\}'	{$$ = makeNode("Class", $2.node, $4)}
					;

member_list			: member_list member	{addChild($1, $2); $$ = $1}
					| member				{$$ = makeNode("MemberList", $1)}
					|						{$$ = makeNode("MemberList")}
					;

member				: function	{$$ = $1}
					;

function			: function_dec function_body	{$$ = makeNode("Function", $1, $2)}
					;

function_dec		: access_dec function_keywords dotted_name id '(' parameter_dec_list ')' {$$ = makeNode("FunctionDec", $1, $2, $3, $4.node, $6)}
					;

access_dec			: 'public'		{$$ = makeLeaf("AccessKeyword", $1)}
					| 'private'		{$$ = makeLeaf("AccessKeyword", $1)}	
					| 'protected'	{$$ = makeLeaf("AccessKeyword", "family")}
					| 'internal'	{$$ = makeLeaf("AccessKeyword", "assembly")}
					|				{$$ = makeLeaf("AccessKeyword", "assembly")}
					;

function_keywords	: function_keywords function_keyword	{addChild($1, $2); $$ = $1}
					| function_keyword						{$$ = makeNode("FunctionKeywords", $1)}
					|										{$$ = makeNode("FunctionKeywords")}
					;

function_keyword	: 'sealed'		{$$ = makeLeaf("FunctionKeyword", $1)}
					| 'static'		{$$ = makeLeaf("FunctionKeyword", $1)}
					| 'abstract'	{$$ = makeLeaf("FunctionKeyword", $1)}
					| 'virtual'		{$$ = makeLeaf("FunctionKeyword", $1)}
					;

function_body		: compound_statement				{$$ = makeNode("FunctionBody", $1)}
					| '=' '>' statement					{$$ = makeNode("FunctionBody", $3)}
					;


compound_statement	: '\{' statement_list '\}'		{$$ = makeNode("CompoundStatement", $2);}
					;

statement_list		:		statement_list statement {addChild($1, $2); $$ = $1}
					|		statement {$$ = makeNode("StatementList", $1);}
					|		{$$ = makeNode("StatementLisr");}
					;


statement			:	assign_statement ';'		{$$ = $1}
					|	call_statement ';'			{$$ = $1}
					|	dec_statement ';'			{$$ = $1}
					|	return_statement ';'		{$$ = $1}
					|	compound_statement
					|	if_statement
					;

return_statement	:	'return'				{$$ = makeLeaf("ReturnStatement")}
					|	'return' expression	{$$ = makeNode("ReturnStatement", $2)}
					;

dec_statement		:	dotted_name id '=' expression {$$ = makeNode("DeclarationStatement", $2.node, $1, $4);}
					|	dotted_name id				{$$ = makeNode("DeclarationStatement", $2.node, $1)}  
					;

assign_statement	:	id '=' expression	{$$ = makeNode("AssignStatement", $1.node, $3)}
					;

if_statement		:	'if' '(' expression ')'	statement	{$$ = makeNode("IfStatement", $3, $5)}
					;

call_statement		:	id '(' parameter_list ')' {$$ = makeNode("Call", $1.node, $3)}
					|   dotted_name '.' id '(' parameter_list ')' {$$ = makeNode("Call", $3.node, $5, $1)}
					;

parameter_list		:	parameter_list ',' expression		{addChild($1, $3); $$ = $1}
					|	expression					{$$ = makeNode("ParameterList", $1)}
					|								{$$ = makeNode("ParameterList")}
					;

parameter_dec_list	:	parameter_dec_list ',' parameter_dec		{addChild($1, $3); $$ = $1}
					|	parameter_dec								{$$ = makeNode("ParameterDecList", $1)}
					|											{$$ = makeNode("ParameterDecList")}
					;

parameter_dec		:	dotted_name id	{$$ = makeNode("ParameterDec", $1, $2.node)}
					;

expression			:	Digit							{$$ = makeLeaf("NumericalLiteral", $1);}
					|	StringLiteral					{$$ = makeLeaf("StringLiteral", $1)}
					|	BoolLiteral						{$$ = makeLeaf("BoolLiteral", $1)}
					|	id								{$$ = makeLeaf("IdentifierExpression", $1)}
					|	expression binop expression		{$$ = makeNode("BinaryExpression", $1, $3, $2);}
					|	'(' expression ')'				{$$ = $2;}
					|	call_statement					{$$ = makeNode("CallExpression", $1)}
					;

dotted_name			: dotted_name '.' id	{$$.name = concat($1.name, concat(".", $3); $$ = makeLeaf("DottedName", $$.name))}
					| id	{$$ = makeLeaf("DottedName", $1); $$.name = $1}
					;

id					:	Identifier	{$$ = $1; $$.node = makeLeaf("IdentifierName", $$);}
					;

binop				:	'+' {$$ = makeLeaf("BinaryOperator", "add")}
					|	'-' {$$ = makeLeaf("BinaryOperator", "sub")}
					|	'/' {$$ = makeLeaf("BinaryOperator", "div")}
					|	'*' {$$ = makeLeaf("BinaryOperator", "mul")}
					;



#End