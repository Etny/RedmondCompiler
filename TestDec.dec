#Grammar

left + -
left * / %
left OR AND
left CGT CLT CEQ NEQ
left .
none ELSE
none [
none RANK_SPECIFIER

%%

//Based on http://www.cs.may.ie/~jpower/Research/csharp/csharp.y

compilation_unit
					:	files
					;

files
					:	files file	{addChild($1, $2); $$ = $1}
					|	file		{$$ = makeNode("FileList", $1)}
					;

file				
					:	import_list namespace_declarations	{$$ = makeNode("File", $1, $2)}
					;

import_list			
					:	import_list import_dec	{addChild($1, $2); $$ = $1}
					|	import_dec				{$$ = makeNode("ImportList", $1)}
					|							{$$ = makeNode("ImportList")}
					;

import_dec			
					:	USING qualified_identifier ';'	{$$ = makeNode("Import", $2)}
					;

namespace_declarations
					:	namespace_declarations namespace_declaration	{addChild($1, $2); $$ = $1}
					|	namespace_declaration							{$$ = makeNode("NamespaceList", $1)}
					|													{$$ = makeNode("NamespaceList")}
					;

namespace_declaration
					:	NAMESPACE qualified_identifier '\{' class_list '\}'	{$$ = makeNode("NamespaceDec", $2, $4)}
					;

class_list			
					:	class_list class_dec	{addChild($1, $2); $$ = $1}
					|	class_dec				{$$ = makeNode("ClassList", $1)}
					|							{$$ = makeNode("ClassList")}
					;

class_dec			
					:	modifier_list CLASS IDENTIFIER generic_params_dec class_base '\{' member_list '\}' {$$ = makeNode("Class", $3, $5, $1, $4, $7)}
					;

generic_params_dec
					:	'<' generic_params_list '>'	{$$ = $2}
					|								{$$ = makeLeaf("EmptyGenericList")}
					;

generic_params_list
					:	generic_params_list ',' IDENTIFIER	{addChild($1, $3); $$ = $1}
					|	IDENTIFIER							{$$ = makeNode("GenericParamsList", $1)}
					;

class_base
					:	':' type_name	{$$ = makeNode("BaseType", $2)}
					|					{$$ = makeNode("BaseType", makeLeaf("Type", "object"))}
					;

member_list			
					:	member_list member	{addChild($1, $2); $$ = $1}
					|	member				{$$ = makeNode("MemberList", $1)}
					|						{$$ = makeNode("MemberList")}
					;

member				
					:	field
					|	property
					|	function
					|	constructor
					;

member_header		
					:	access_dec modifier_list type	{$$ = makeNode("DecHeader", $1, $2, $3)}
					;

field				
					:	member_header dec_list ';'	{$$ = makeNode("FieldDec", $1, $2)}
					;

property
					:	member_header IDENTIFIER '\{' property_accessors_def '\}' property_default_value	{$$ = makeNode("PropertyDec", $1, $2, $4, $6)}
					|	member_header IDENTIFIER ARROW expression ';'										{$$ = makeNode("ReadonlyPropertyDec", $1, $2, $4)}
					;

property_accessors_def
					:	accessor_dec accessor_dec	{$$ = makeNode("PropertyAccessorsDef", $1, $2)}
					|	accessor_dec				{$$ = makeNode("PropertyAccessorsDef", $1)}
					;

accessor_dec
					:	access_dec accessor_kind function_body		{$$ = makeNode("AccessorDec", $2, $1, $3)}
					|	access_dec accessor_kind ';'				{$$ = makeNode("AutoAccessorDec", $2, $1)}
					;

accessor_kind
					:	GET		{$$ = makeLeaf("AccessorKind", "get")}
					|	SET		{$$ = makeLeaf("AccessorKind", "set")}
					;

property_default_value
					:	EQ expression ';'	{$$ = makeNode("DefaultValue", $2)}
					|						{$$ = makeNode("EmptyDefaultValue")}
					;

constructor			
					:	constructor_dec function_body	{$$ = makeNode("Constructor", $1, $2)}
					;

constructor_dec		
					:	member_header '\(' parameter_dec_list '\)' constructor_initializer	{$$ = makeNode("ConstructorDec", $1, $3, $5)}
					;

constructor_initializer
					:	':' BASE '\(' parameter_list '\)'	{$$ = makeNode("BaseInitializer", $4)}
					|	':' THIS '\(' parameter_list '\)'	{$$ = makeNode("ThisInitializer", $4)}
					|										{$$ = makeNode("BaseInitializer", makeLeaf("ParameterList")}
					;

function			
					:	function_dec function_body	{$$ = makeNode("Function", $1, $2)}
					|	function_dec ';'	{$$ = makeNode("Function", $1)}
					;

function_dec		
					:	member_header IDENTIFIER '\(' parameter_dec_list '\)' {$$ = makeNode("FunctionDec", $1, $2, $4)}
					;

access_dec			
					:	PUBLIC		{$$ = makeLeaf("AccessKeyword", "public")}
					|	PRIVATE		{$$ = makeLeaf("AccessKeyword", "private")}	
					|	PROTECTED	{$$ = makeLeaf("AccessKeyword", "family")}
					|	INTERNAL	{$$ = makeLeaf("AccessKeyword", "assembly")}
					|				{$$ = makeLeaf("AccessKeyword", "assembly")}
					;

modifier_list		
					:	modifier_list modifier	{addChild($1, $2); $$ = $1}
					|	modifier				{$$ = makeNode("ModifierList", $1)}
					|							{$$ = makeNode("ModifierList")}
					;

modifier			
					:	SEALED		{$$ = makeLeaf("Modifier", "sealed")}
					|	STATIC		{$$ = makeLeaf("Modifier", "static")}
					|	ABSTRACT	{$$ = makeLeaf("Modifier", "abstract")}
					|	VIRTUAL		{$$ = makeLeaf("Modifier", "virtual")}
					|	CONST		{$$ = makeLeaf("Modifier", "literal")}
					|	READONLY	{$$ = makeLeaf("Modifier", "initonly")}
					|	OVERRIDE	{$$ = makeLeaf("Modifier", "virtual")}
					;

function_body		
					:	compound_statement		{$$ = makeNode("FunctionBody", $1)}
					|	ARROW statement			{$$ = makeNode("FunctionBody", makeNode("FunctionBodyStatement", $2))}
					|	ARROW expression ';'	{$$ = makeNode("FunctionBody", makeNode("FunctionBodyStatement", $2))}
					;


compound_statement	
					:	'\{' statement_list '\}'	{$$ = makeNode("CompoundStatement", $2);}
					;

statement_list		
					:	statement_list statement	{addChild($1, $2); $$ = $1}
					|	statement					{$$ = makeNode("StatementList", $1);}
					|								{$$ = makeNode("StatementList");}
					;

statement			
					:	call_statement ';'	{$$ = $1}
					|	dec_statement ';'		{$$ = $1}
					|	return_statement ';'	{$$ = $1}
					|	statement_expression ';' {$$ = makeNode("ExpressionStatement", $1)}
					|	compound_statement
					|	if_statement
					|	while_statement
					|	for_statement
					|	switch_statement
					|	break_statement	';'	{$$ = $1}
					;

return_statement	
					:	RETURN				{$$ = makeLeaf("ReturnStatement")}
					|	RETURN expression	{$$ = makeNode("ReturnStatement", $2)}
					;

dec_statement		:	type dec_list					{$$ = makeNode("DeclarationStatement", $1, $2);}
					|	VAR IDENTIFIER EQ expression	{$$ = makeNode("VarDeclarationStatement", $2, $4)}
					;

dec_list	
					:	dec_list ',' var_dec	{addChild($1, $3); $$ = $1}
					|	var_dec					{$$ = makeNode("DecList", $1)}
					;

var_dec				
					:	IDENTIFIER					{$$ = makeNode("VarDec", $1)}
					|	IDENTIFIER EQ expression	{$$ = makeNode("VarDec", $1, $3)}
					;

assign_statement	
					:	unary_expression EQ expression		{$$ = makeNode("AssignExpression", $1, $3, makeLeaf("AssignOperator", "None"))}
					|	unary_expression PLUSEQ expression	{$$ = makeNode("AssignExpression", $1, $3, makeLeaf("AssignOperator", "Add"))}
					|	unary_expression MINUSEQ expression	{$$ = makeNode("AssignExpression", $1, $3, makeLeaf("AssignOperator", "Sub"))}
					|	unary_expression DIVEQ expression	{$$ = makeNode("AssignExpression", $1, $3, makeLeaf("AssignOperator", "Div"))}
					|	unary_expression MULEQ expression	{$$ = makeNode("AssignExpression", $1, $3, makeLeaf("AssignOperator", "Mul"))}
					|	unary_expression MODEQ expression	{$$ = makeNode("AssignExpression", $1, $3, makeLeaf("AssignOperator", "Rem"))}
					;



if_statement		
					:	IF parenthesized_expression statement ELSE statement	{$$ = makeNode("IfElseStatement", $2, $3, $5)}
					|	IF parenthesized_expression statement					{$$ = makeNode("IfStatement", $2, $3)}
					;

while_statement		
					:	WHILE parenthesized_expression statement			{$$ = makeNode("WhileStatement", $2, $3)}
					|	DO statement WHILE parenthesized_expression ';'	{$$ = makeNode("DoWhileStatement", $4, $2)}
					;

for_statement		
					:	FOR	'\(' for_initializer ';' for_condition ';' for_iterator '\)' statement	{$$ = makeNode("ForStatement", $3, $5, $7, $9)}
					;

for_initializer
					:	dec_statement
					|	statement_expression_list
					|	{$$ = makeLeaf("Empty")}
					;

for_condition		
					:	expression
					|	{$$ = makeLeaf("Empty")}
					;

for_iterator		
					:	statement_expression_list
					|	{$$ = makeLeaf("Empty")}
					;

switch_statement
					:	SWITCH '(' expression ')' switch_block	{$$ = makeNode("SwitchStatement", $3, $5)}
					;

switch_block
					:	'\{' switch_sections '\}'	{$$ = $2}
					;

switch_sections		
					:	switch_sections switch_section	{addChild($1, $2); $$ = $1}
					|	switch_section					{$$ = makeNode("SwitchSections", $1)}
					|									{$$ = makeNode("SwitchSections")}
					;

switch_section
					:	switch_label statement_list	{$$ = makeNode("SwitchSection", $1, $2)}
					;

switch_label
					:	CASE expression ':'	{$$ = makeNode("SwitchLabel", $2)}
					|	DEFAULT	':'			{$$ = makeNode("DefaultLabel")}
					;

break_statement
					:	BREAK	{$$ = makeNode("BreakStatement")}
					;

call_statement		
					:	primary_expression_no_parenthesis '\(' parameter_list '\)'	{$$ = makeNode("Call", $1, $3)}
					|	qualified_identifier '\(' parameter_list '\)'				{$$ = makeNode("Call", $1, $3)}
					;

parameter_list		
					:	parameter_list ',' expression		{addChild($1, $3); $$ = $1}
					|	expression					{$$ = makeNode("ParameterList", $1)}
					|								{$$ = makeNode("ParameterList")}
					;

parameter_dec_list	
					:	parameter_dec_list ',' parameter_dec		{addChild($1, $3); $$ = $1}
					|	parameter_dec								{$$ = makeNode("ParameterDecList", $1)}
					|											{$$ = makeNode("ParameterDecList")}
					;

parameter_dec		
					:	type IDENTIFIER			{$$ = makeNode("ParameterDec", $1, $2)}
					;

array_dec_expression
					:	NEW type '[' expression ']'						{$$ = makeNode("NewArrayExpression", $2, $4)}
					|	NEW array_type array_init_expression		{$$ = makeNode("NewArrayExpression", $2, $3)}
					|	array_init_expression									{$$ = makeNode("NewArrayExpression", $1)}
					;

new_expression
					:	NEW non_array_type '\(' parameter_list '\)'	{$$ = makeNode("NewExpression", $2, $4)}
					;

statement_expression
					:	assign_statement
					|	post_inc_or_dec_expression
					|	new_expression
					;

statement_expression_list
					:	statement_expression								{$$ = makeNode("StatementExpressionList", $1)}
					|	statement_expression_list ',' statement_expression	{addChild($1, $3); $$ = $1}
					;


array_init_expression		
					:	'\{' parameter_list '\}' {$$ = $2}
					;

array_access_expression
					:	qualified_identifier '[' expression ']'	{$$ = makeNode("ArrayAccessExpression", $1, $3)}
					|	primary_expression '[' expression ']'	{$$ = makeNode("ArrayAccessExpression", $1, $3)}
					;

literal_expression
					:	STRING_LITERAL	{$$ = makeLeaf("StringLiteral", $1)}
					|	REAL_LITERAL	{$$ = makeLeaf("RealLiteral", $1)}
					|	CHAR_LITERAL	{$$ = makeLeaf("CharLiteral", $1)}
					|	BOOL_LITERAL	{$$ = makeLeaf("BoolLiteral", $1)}
					|	INT_LITERAL		{$$ = makeLeaf("IntLiteral", $1}
					|	NULL			{$$ = makeLeaf("NullLiteral")}
					;

binary_expression	
					:	binary_expression '+' unary_expression				{$$ = makeNode("BinaryExpression", $1, $3, makeLeaf("BinaryOperator", "Add"));}
					|	binary_expression '-' unary_expression				{$$ = makeNode("BinaryExpression", $1, $3, makeLeaf("BinaryOperator", "Sub"));}
					|	binary_expression '/' unary_expression				{$$ = makeNode("BinaryExpression", $1, $3, makeLeaf("BinaryOperator", "Div"));}
					|	binary_expression '*' unary_expression				{$$ = makeNode("BinaryExpression", $1, $3, makeLeaf("BinaryOperator", "Mul"));}
					|	binary_expression '\%' unary_expression				{$$ = makeNode("BinaryExpression", $1, $3, makeLeaf("BinaryOperator", "Rem"));}
					|	unary_expression
					;
					
relational_expression
					:	relational_expression CEQ binary_expression				{$$ = makeNode("BinaryBoolExpression", $1, $3, makeLeaf("BinaryBooleanOperator", "Ceq"))}
					|	relational_expression NEQ binary_expression				{$$ = makeNode("BinaryBoolExpression", $1, $3, makeLeaf("BinaryBooleanOperator", "Neq"))}
					|	relational_expression CLT binary_expression				{$$ = makeNode("BinaryBoolExpression", $1, $3, makeLeaf("BinaryBooleanOperator", "Clt"))}
					|	relational_expression CGT binary_expression				{$$ = makeNode("BinaryBoolExpression", $1, $3, makeLeaf("BinaryBooleanOperator", "Cgt"))}
					|	relational_expression NGT binary_expression				{$$ = makeNode("BinaryBoolExpression", $1, $3, makeLeaf("BinaryBooleanOperator", "Ngt"))}
					|	relational_expression NLT binary_expression				{$$ = makeNode("BinaryBoolExpression", $1, $3, makeLeaf("BinaryBooleanOperator", "Nlt"))}
					|	binary_expression
					;

conditional_bool_expression
					:	conditional_expression AND relational_expression		{$$ = makeNode("BoolCheckExpression", $1, $3, makeLeaf("BooleanCheckOperator", "And"))}
					|	conditional_expression OR relational_expression			{$$ = makeNode("BoolCheckExpression", $1, $3, makeLeaf("BooleanCheckOperator", "Or"))}
					|	relational_expression
					;

conditional_expression
					:	conditional_bool_expression
					|	conditional_bool_expression '?' expression ':' expression	{$$ = makeNode("TernaryExpression", $1, $3, $5)}
					;

primary_expression_no_parenthesis
					:	literal_expression
					|	array_dec_expression
					|	member_access
					|	call_statement							
					|	array_access_expression
					|   new_expression
					|	base_access
					|	this_access
					;


primary_expression	
					:	parenthesized_expression
					|	primary_expression_no_parenthesis
					;

expression
					:	conditional_expression
					|	assign_statement
					;

unary_expression	
					:	postfix_expression
					|	cast_expression
					|	'!'	postfix_expression	{$$ = makeNode("UnaryExpression", $2, makeLeaf("UnaryOperator", "Neg"))}
					;

post_inc_or_dec_expression
					:	postfix_expression PLUSPLUS		{$$ = makeNode("PostIncOrDec", $1, makeLeaf("BinaryOperator", "Add"))}
					|	postfix_expression MINUSMINUS	{$$ = makeNode("PostIncOrDec", $1, makeLeaf("BinaryOperator", "Sub"))}
					;

postfix_expression	
					:	qualified_identifier
					|	primary_expression
					|	post_inc_or_dec_expression
					;

cast_expression
					:	'(' type ')' unary_expression	{$$ = makeNode("CastExpression", $2, $4)}
					;


parenthesized_expression	
					:	'\(' expression '\)'	{$$ = $2}
					;

					
member_access		
					:	primary_expression '.' IDENTIFIER	{$$ = makeNode("MemberAccess", $1, $3)}
					|	primitive_type	'.'	IDENTIFIER		{$$ = makeNode("MemberAccess", $1, $3)}
					|	class_type	'.'	IDENTIIER			{$$ = makeNode("MemberAccess", $1, $3)}
					;

base_access
					:	BASE '.' IDENTIFIER	{$$ = makeNode("BaseAccess", $3)}
					;

this_access
					:	THIS {$$ = makeLeaf("ThisAccess")}
					;
					
type	
					:	array_type
					|	non_array_type
					;

array_type	
					:	qualified_identifier RANK_SPECIFIER	{$$ = makeNode("Array", $1)}
					|	simple_type	RANK_SPECIFIER			{$$ = makeNode("Array", $1)}
					;

non_array_type		
					:	generic_type
					|	simple_type
					|	type_name
					;

generic_type
					:	qualified_identifier '<' type_list '>'	{$$ = makeNode("GenericType", $1, $3)}
					;

type_list
					:	type_list ',' type	{addChild($1, $3); $$ = $1}
					|	type				{$$ = makeNode("TypeList", $1)}
					;

simple_type
					:	primitive_type
					|	class_type
					;

primitive_type
					:	numeric_type
					|	BOOL	{$$ = makeLeaf("Type", "bool")}
					;

numeric_type
					:	real_type
					|	int_type
					;

real_type
					:	FLOAT	{$$ = makeLeaf("Type", "float")}
					|	DOUBLE	{$$ = makeLeaf("Type", "double")}
					;

int_type	
					:	BYTE	{$$ = makeLeaf("Type", "byte")}
					|	SHORT	{$$ = makeLeaf("Type", "short")}
					|	CHAR	{$$ = makeLeaf("Type", "char")}
					|	INT		{$$ = makeLeaf("Type", "int")}
					|	LONG	{$$ = makeLeaf("Type", "long")}
					;

class_type
					:	OBJECT	{$$ = makeLeaf("Type", "object")}
					|	STRING	{$$ = makeLeaf("Type", "string")}
					;

type_name			
					:	qualified_identifier
					;

qualified_identifier
					:	IDENTIFIER					{$$ = makeNode("QualifiedIdentifier", $1}
					|	qualifier IDENTIFIER		{$$ = makeNode("QualifiedIdentifier", $1, $2)}
					;
qualifier
					:	IDENTIFIER '.'				{$$ = makeNode("Qualifier", $1)}
					|	qualifier IDENTIFIER '.'	{$$ = makeNode("Qualifier", $1, $2)}
					;





#End

#Settings
	
PrecedenceSearchDepth: 1
AutoValueInheritance: true

#end

#Tokens

IDENTIFIER
Operator
Punctuation
Whitespace
NewLine

BYTE SHORT CHAR INT LONG FLOAT DOUBLE DECIMAL BOOL
OBJECT STRING

REAL_LITERAL STRING_LITERAL INTER_LITERAL BOOL_LITERAL CHAR_LITERAL NULL

STATIC PUBLIC PRIVATE INTERNAL PROTECTED SEALED VIRTUAL ABSTRACT OVERRIDE
READONLY CONST CLASS NAMESPACE USING RETURN NEW IF ELSE DO WHILE FOR SWITCH
CASE BREAK DEFAULT BASE THIS ARROW GET SET VALUE VAR

PLUSPLUS MINUSMINUS

PLUSEQ MINUSEQ MULEQ DIVEQ MODEQ

EQ CEQ CLT CGT NLT NGT NEQ AND OR

RANK_SPECIFIER

#End

#Lex


letter = [a-zA-Z]
decimal_digit = [0-9]
character = letter|decimal_digit|_

real_suffix = [FfDdMm]

real1 = decimal_digit+ real_suffix
real2 = decimal_digit* \. decimal_digit+ real_suffix*

string_char = [^\\\"]

%%

static		{STATIC}
public		{PUBLIC}
private		{PRIVATE}
protected	{PROTECTED}
sealed		{SEALED}
virtual		{VIRTUAL}
abstract	{ABSTRACT}
readonly	{READONLY}
override	{OVERRIDE}
const		{CONST}
class		{CLASS}
namespace	{NAMESPACE}
using		{USING}
return		{RETURN}
new			{NEW}
if			{IF}
else		{ELSE}
while		{WHILE}
do			{DO}
for			{FOR}
switch		{SWITCH}
case		{CASE}
break		{BREAK}
default		{DEFAULT}
base		{BASE}
this		{THIS}
=>			{ARROW}
get			{GET}
set			{SET}
value		{VALUE}
var			{VAR}

\+\+		{PLUSPLUS}
\-\-		{MINUSMINUS}

\&\&		{AND}
\|\|		{OR}
==			{CEQ}
!=			{NEQ}
>			{CGT}
<			{CLT}
<=			{NGT}
>=			{NLT}
=			{EQ}

\+=			{PLUSEQ}
\-=			{MINUSEQ}
\*=			{MULEQ}
/=			{DIVEQ}
\%=			{MODEQ}

\[\s*\]		{RANK_SPECIFIER}

byte	{BYTE}
short	{SHORT}
char	{CHAR}
int		{INT}
long	{LONG}
float	{FLOAT}
double	{DOUBLE}
decimal	{DECIMAL}
bool	{BOOL}
object	{OBJECT}
string	{STRING}

real1	{REAL_LITERAL; $$ = makeValue(realType($), parseReal($))}
real2	{REAL_LITERAL; $$ = makeValue(realType($), parseReal($))}
null	{NULL}

true												{BOOL_LITERAL; $$.type = "bool"; $$ = makeValue("bool", parseBool($))}
false												{BOOL_LITERAL; $$.type = "bool"; $$ = makeValue("bool", parseBool($))}
(letter|_)character*								{IDENTIFIER; $$ = makeLeaf("Identifier", $); $$.text = $}
decimal_digit+										{INT_LITERAL; $$.num = parseInt($); $$.type = "int"; $$ = makeValue("int32", parseInt($));}
[=\*/+\-%]											{Operator}
[,();:>.\{\}\[\]?!]								{Punctuation}
[\s]											{Whitespace}
\/\/[^\n\r]*[\n\r]								{Whitespace
'string_char'										{CHAR_LITERAL; $$ = makeValue("char", parseChar($))}
"string_char*"			{STRING_LITERAL; $$ = makeValue("string", $)}

#End