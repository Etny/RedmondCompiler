#Tokens

Identifier
Operator
Punctuation
Digit
Whitespace

#End

#Lex

letter = [a-z]
number = [0-9]

%%

letter letter* {Identifier; $$ = $}
number+ {Digit; $$ = parseInt($);}
[=\*/+-] {Operator}
[$,();:] {Punctuation}
\n	{NewLine}
\w|\t	{Whitespace}

#End

#Grammar

left + -
left * /


%%


statementList		:	statement ';' emptyChar statementList	{$$.node = makeNode("stmntList", $1.node, $4.node);}
					|		{$$.node = makeLeaf("empty", "nothing");}
					;

statement			:	assign_statement	{$$.node = $1.node;}
					;

assign_statement	:	id '=' expression	{$$.node = makeNode("assign", $1.node, $3.node);}
					;

expression			:	Digit							{$$.node = makeLeaf("num", $1);}
					|	id								{$$.node = $1.node;}
					|	expression binop expression		{$$.node = makeNode($2.op, $1.node, $3.node);}
					|	'(' expression ')'				{$$.node = $2.node;}
					;

id					:	Identifier	{$$.node = makeLeaf("id", $1);}
					;

binop				:	'+' {$$.op = "add";}
					|	'-' {$$.op = "sub";}
					|	'/' {$$.op = "div";}
					|	'*' {$$.op = "mul";}
					;


emptyChar		:	NewLine
				|	Whitespace
				|
				;

#End