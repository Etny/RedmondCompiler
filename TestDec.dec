#Settings
	
PrecedenceSearchDepth: 1
AutoValueInheritance: true

#end

#Tokens

Identifier
Operator
Punctuation
Digit
Whitespace
NewLine
StringLiteral
Keyword

#End

#Lex

letter = [a-zA-Z]
number = [0-9]

%%

letter letter* {Identifier}
number+ {Digit; $$.num = parseInt($); $$.type = "int"; $$ = makeValue("int32", parseInt($));}
[=\*/+-] {Operator}
[$,();:\{\}>] {Punctuation}
//[\n\r]	{NewLine}
[\w\t\r\n]	{Whitespace}
"((letter|number)|[\w\t\r\n])*"	{StringLiteral; $$ = makeValue("string", $)}

#End

#Grammar

left + -
left * /

%%

function			: function_dec function_body	{$$ = makeNode("Function", $1, $2)}
					;

function_dec		: access_dec function_keywords 'void' id '(' ')' {$$ = makeNode("FunctionDec", $1, $2, $4.node)}
					;

access_dec			: 'public'		{$$ = makeLeaf("AccessKeyword", $1)}
					| 'private'		{$$ = makeLeaf("AccessKeyword", $1)}	
					| 'protected'	{$$ = makeLeaf("AccessKeyword", $1)}
					| 'internal'	{$$ = makeLeaf("AccessKeyword", $1)}
					|				{$$ = makeLeaf("AccessKeyword", "internal")}
					;

function_keywords	: function_keywords function_keyword	{addChild($1, $2); $$ = $1}
					| function_keyword						{$$ = makeNode("FunctionKeywords", $1)}
					|										{$$ = makeNode("FunctionKeywords")}
					;

function_keyword	: 'sealed'		{$$ = makeLeaf("FunctionKeyword", $1)}
					| 'static'		{$$ = makeLeaf("FunctionKeyword", $1)}
					| 'abstract'	{$$ = makeLeaf("FunctionKeyword", $1)}
					| 'virtual'		{$$ = makeLeaf("FunctionKeyword", $1)}
					;

function_body		: compound_statement				{$$ = makeNode("FunctionBody", $1)}
					| '=' '>' statement					{$$ = makeNode("FunctionBody", $3)}
					;


compound_statement	: '\{' statement_list '\}'		{$$ = makeNode("CompoundStatement", $2);}
					;

statement_list		:		statement_list statement {addChild($1, $2); $$ = $1}
					|		statement {$$ = makeNode("StatementList", $1);}
					|		{$$ = makeNode("StatementLisr");}
					;


statement			:	assign_statement ';'	{$$ = $1}
					|	call_statement ';'		{$$ = $1}
					|	dec_statement ';'		{$$ = $1}
					|	compound_statement
					|	if_statement
					;

dec_statement		:	id id '=' expression {$$ = makeNode("DeclarationStatement", $2.node, $4, $1.node);}
					;

assign_statement	:	id '=' expression	{$$ = makeNode("AssignStatement", $1.node, $3)}
					;

if_statement		:	'if' '(' expression ')'	statement	{$$ = makeNode("IfStatement", $3, $5)}
					;

call_statement		:	id '(' ')' {$$ = makeLeaf("Call", $1)}
					;

expression			:	Digit							{$$ = makeLeaf("NumericalLiteral", $1);}
					|	StringLiteral					{$$ = makeLeaf("StringLiteral", $1)}
					|	id								{$$ = makeLeaf("IdentifierExpression", $1)}
					|	expression binop expression		{$$ = makeNode("BinaryExpression", $1, $3, $2);}
					|	'(' expression ')'				{$$ = $2;}
					;

id					:	Identifier	{$$ = $1; $$.node = makeLeaf("IdentifierName", $$);}
					;

binop				:	'+' {$$ = makeLeaf("BinaryOperator", "add")}
					|	'-' {$$ = makeLeaf("BinaryOperator", "sub")}
					|	'/' {$$ = makeLeaf("BinaryOperator", "div")}
					|	'*' {$$ = makeLeaf("BinaryOperator", "mul")}
					;



#End