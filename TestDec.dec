#Settings
	
PrecedenceSearchDepth: 1
AutoValueInheritance: true

#end

#Tokens

Identifier
Operator
Punctuation
Digit
Whitespace
NewLine
StringLiteral

#End

#Lex

letter = [a-z]
number = [0-9]

%%

letter letter* {Identifier}
number+ {Digit; $$ = parseInt($);}
[=\*/+-] {Operator}
[$,();:\{\}] {Punctuation}
//[\n\r]	{NewLine}
[\w\t\r\n]	{Whitespace}
"((letter|number)|[\w\t\r\n])*"	{StringLiteral}

#End

#Grammar

left + -
left * /

%%

block				: '\{' statementList '\}'		{$$ = makeNode("block", $2);}
					;

statementList		:		statementList statement {addChild($1, $2); $$ = $1}
					|		statement {$$ = makeNode("stmntList", $1);}
					|		{$$ = makeNode("stmntList");}
					;


statement			:	assign_statement ';' {$$ = $1}
					|	call_statement ';' {$$ = $1}
					|	block
					;

assign_statement	:	id '=' expression	{$$ = makeValueNode("statement", "assign", $1, $3)}
					;

call_statement		:	id '(' ')' {$$ = makeNode("call", $1)}
					;

expression			:	Digit							{$$ = makeValueNode("expr", "const", makeLeaf("num", $1))}
					|	StringLiteral					{$$ = makeValueNode("expr", "const", makeLeaf("string", $1))}
					|	id								{$$ = makeValueNode("expr", "const", $1)}
					|	expression binop expression		{$$ = makeValueNode("expr", "binop", $1, $3, $2);}
					|	'(' expression ')'				{$$ = $2;}
					;

id					:	Identifier	{$$ = makeLeaf("id", $1)}
					;

binop				:	'+' {$$ = makeLeaf("binop", "add")}
					|	'-' {$$ = makeLeaf("binop", "sub")}
					|	'/' {$$ = makeLeaf("binop", "div")}
					|	'*' {$$ = makeLeaf("binop", "mul")}
					;



#End